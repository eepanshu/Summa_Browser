import os
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from werkzeug.utils import secure_filename
import logging
from datetime import datetime
import tempfile
import re

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configuration
UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'output'
app.config['UPLOAD_FOLDER'] = os.path.join(os.path.dirname(os.path.abspath(__file__)), UPLOAD_FOLDER)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# Ensure folders exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def extract_text_from_simple_formats(file_path, file_ext):
    """Basic text extraction for demonstration"""
    if file_ext.lower() in {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp'}:
        return f"Image file '{os.path.basename(file_path)}' uploaded successfully. OCR processing would extract text here."
    elif file_ext.lower() == '.pdf':
        return f"PDF file '{os.path.basename(file_path)}' uploaded successfully. PDF text extraction would process content here."
    else:
        return "File uploaded but format not supported for text extraction."

def simple_summarize(text, max_length=200):
    """Create a simple summary"""
    if len(text) <= max_length:
        return text
    
    # Simple truncation with sentence boundary
    summary = text[:max_length]
    last_period = summary.rfind('.')
    if last_period > 50:  # Ensure we have a reasonable amount of text
        summary = summary[:last_period + 1]
    
    return summary + " [Summary generated by SummaBrowser AI]"

@app.route('/')
def index():
    """Health check endpoint"""
    return jsonify({
        'status': 'SummaBrowser Backend Running',
        'version': '2.0.0',
        'timestamp': datetime.now().isoformat(),
        'message': 'API is ready to process files!'
    })

@app.route('/health')
def health():
    """Detailed health check"""
    return jsonify({
        'status': 'healthy',
        'services': {
            'file_upload': 'available',
            'summarization': 'available',
            'download': 'available'
        }
    })

@app.route('/process', methods=['POST'])
def process_file():
    """Process uploaded file and generate summary"""
    try:
        # Validate request
        if 'file' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400

        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400

        # Validate file type
        allowed_extensions = {'.pdf', '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp', '.txt'}
        file_ext = os.path.splitext(file.filename.lower())[1]
        if file_ext not in allowed_extensions:
            return jsonify({'error': 'Unsupported file type. Please upload a PDF, image, or text file.'}), 400

        # Process filename
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)

        # Ensure unique filename
        counter = 1
        original_path = file_path
        while os.path.exists(file_path):
            base, ext = os.path.splitext(original_path)
            file_path = f"{base}_{counter}{ext}"
            filename = os.path.basename(file_path)
            counter += 1

        # Save uploaded file
        file.save(file_path)
        logger.info(f'File saved: {filename}')

        # Extract text based on file type
        if file_ext.lower() == '.txt':
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                text = f.read()
        else:
            text = extract_text_from_simple_formats(file_path, file_ext)

        # Generate summary
        summary = simple_summarize(text)

        # Save results
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # Save summary
        summary_file = os.path.join(OUTPUT_FOLDER, f"summary_{timestamp}.txt")
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(f"SummaBrowser AI Summary\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"File: {filename}\n")
            f.write(f"{'='*50}\n\n")
            f.write(summary)

        logger.info(f'Processing completed for {filename}')

        return jsonify({
            'success': True,
            'summary': summary,
            'download_url': f'/download/summary_{timestamp}.txt',
            'file_info': {
                'name': filename,
                'size': os.path.getsize(file_path),
                'type': file_ext
            }
        })

    except Exception as e:
        logger.error(f'Error processing file: {str(e)}')
        return jsonify({'error': f'Processing error: {str(e)}'}), 500
    
    finally:
        # Clean up uploaded file
        try:
            if 'file_path' in locals() and os.path.exists(file_path):
                os.remove(file_path)
        except:
            pass

@app.route('/download/<filename>')
def download_file(filename):
    """Download generated summary file"""
    try:
        file_path = os.path.join(OUTPUT_FOLDER, filename)
        if os.path.exists(file_path):
            return send_file(file_path, as_attachment=True, download_name=filename)
        else:
            return jsonify({'error': f'File {filename} not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.errorhandler(413)
def too_large(e):
    return jsonify({'error': 'File too large. Maximum size is 16MB.'}), 413

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    host = '0.0.0.0' if 'PORT' in os.environ else '127.0.0.1'
    debug = 'PORT' not in os.environ
    
    logger.info(f'Starting SummaBrowser on {host}:{port}')
    app.run(debug=debug, host=host, port=port)
